---
title: Installing and Configuring Azure Open Service Broker for PCF
owner: Partners
---

This topic describes how to install and configure Azure Open Service Broker for Pivotal Cloud Foundry(PCF).

<p class="note"><strong>Note</strong>: This software is Beta quality. Releases prior to v1.0.0 may introduce breaking changes, and should not be used in production.</p>

##<a id='account'></a> Step 1: Set up Azure

In this step, you configure your Azure account to allow the Microsoft Open Service Broker for Azure to create and manage Azure resources.

1. Create an Azure account by following [these steps](https://azure.microsoft.com/en-us/free/).

1. Create a service principal by following [these steps](https://github.com/Azure/open-service-broker-azure/tree/master/contrib/cf).

<p class="note"><strong>Note</strong>: The <code>Contributor</code> role needs to be assigned to the service principal. </p>

##<a id='redis'></a>Step 2: Create a Redis Host for Service Broker

The Azure Open Service Broker for PCF stores information, like the provisioning information of a
service instance, in the redis database.
Follow [these steps](https://github.com/Azure/open-service-broker-azure/tree/master/contrib/cf#create-an-azure-redis-cache) to create a Redis Cache instance on Azure.

##<a id='install'></a>Step 3: Install and Configure Azure Open Service Broker for PCF

1. Download the product file from [Pivotal Network](https://network.pivotal.io/products/open-service-broker-azure).

1. Navigate to the Ops Manager Installation Dashboard and click **Import a Product** to upload the product file.

1. Click **Add** next to the uploaded Microsoft Open Service Broker for Azure tile in the Ops Manager **Available Products** view to add it to your staging area.

1. Click the newly added **Microsoft Open Service Broker for Azure** tile to configure the sections
as described below. After the configuration, return to the Ops Manager Installation Dashboard
and click **Apply Changes** to install the Azure Open Service Broker for PCF tile.

###<a id='azure-config'></a> Azure Config

The setup in [Step 1](#account) must be successfully completed before beginning this configuration. 
You will need the Azure and database parameters from that step to successfully configure the broker.

1. Click **Azure Config**.

    <%= image_tag("images/osba-azureconfig.png") %>

1. For **Azure Environment**, select `Azure Public Cloud` for Azure accounts on public Azure.

1. Enter the **Subscription Id** from [Step 1](#account).

1. Enter the **Tenant Id**, **Client Id**, and **Client Secret** from [Step 1](#account).

1. Click **Save**.

###<a id='broker-config'></a> Broker Config

1. Click **Broker Config**.

    <%= image_tag("images/osba-brokerconfig.png") %>

1. For **Log Level**, select `INFO` if you are not tracking broker issues.

1. For **Minimum Module Stability**, it determines the modules to be exposed to developers, which reach the minimum stability. See the [Using Microsoft Open Service Broker for Azure](using.html) topic to check modules' stability.

1. For **Storage Redis Host** and **Storage Redis Password**, enter the `hostName` and `primaryKey` you got from [Step 2](#redis).

1. For **Storage Redis Port**, enter `6380` for the default-created Azure Redis Cache.

1. For **Storage Redis DB**, enter `0` to use the first database in Redis to store the information of service instances.

1. Check the box of **Storage Redis Enable TLS** for default-created Azure Redis Cache.

1. Specify `AES256` as **Storage Encryption Scheme**. It is the only supported encryption scheme for now.

1. For **Storage AES256 KEY**, enter a 32 character string. Keep this string somewhere in case it is needed in the future..

1. For **Async Redis Host**, **Async Redis Password**, and **Async Redis Port**, you can reuse the same Redis Host as **Storage**. And set **Async Redis DB** by `1` to use a different database. Then also check the box of **Async Redis Enable TLS**.

1. Click **Save**.

###<a id='defaultparameters-config'></a> Default Parameters Config

1. Click **Default Parameters Config**.

    <%= image_tag("images/osba-defaultparametersconfig.png") %>

1. Both **Default Resource Group** and **Default Location** are optional.
If present, you don't need to specify these parameters when you use CF CLI to create new service
instances. Tthe new Azure resources will be created in the resource group in the specified region on Azure.

1. Click **Save**.

##<a id='confirm'></a> Step 4: Confirm Installation

<p class="note"><strong>Note</strong>: The Azure Open Service Broker for PCF installs an app
named <code>open-services-broker-azure</code> in the
<code>open-service-broker-azure-space</code> space of the <code>system</code> org.</p>

1. After Ops Manager finishes the installation, the **Microsoft Open Service Broker for Azure** appears as a green tile in the **Installation Dashboard**.

    <%= image_tag("images/osba-install.png") %>

1. In Apps Manager, the new services are listed in the **Marketplace**, and are exposed to all orgs and spaces. Users can create instances of these services only by using the Cloud Foundry Command Line Interface (cf CLI) because Apps Manager does not support asynchronous services. See the [Using Microsoft Open Service Broker for Azure](using.html) topic for more information.

    <%= image_tag("images/osba-marketplace.png") %>


##<a id="service-access"></a>Step 5: Confirm Service and Plan Access

The Azure Open Service Broker for PCF is installed with all services enabled by default. All services can be listed in the Marketplace.

You can disable or enable any services through the cf CLI using the `cf disable-service-access` or `cf enable-service-access` commands.
